| \*Currying and multiple parameter lists

```
def sum(x: Int, y: Int) = x + y
--
def sumCurried(x: Int)(y: Int) = x + y
--
val sum2 = sumCurried(2) _
sum2(3)
--
val sumFunc = sum _
val sumCurr = sumFunc.curried
```
---
| \*takeWhile

```
import annotation.tailrec
@tailrec
def takeWhile[A](
    l: List[A], acc: List[A] = Nil
)(
    f: A => Boolean
): List[A] =
--
  if (l.isEmpty || !f(l.head)) acc.reverse
  else takeWhile(l.tail, l.head :: acc)(f)
```
---
| \*takeWhile

```
import annotation.tailrec
@tailrec
def takeWhile[A](
    l: List[A], acc: List[A] = Nil
)(
    f: A => Boolean
): List[A] =
  if (l.isEmpty || !f(l.head)) acc.reverse
  else takeWhile(l.tail, l.head :: acc)(f)
```
---
```
def map[A,B](l: List[A])(f: A => B): List[B] =
--
  l.foldRight(List.empty[B]) {
    (x, l) => f(x) :: l
  }
```
---
```
def map[A,B](l: List[A])(f: A => B): List[B] =
  l.foldRight(List.empty[B]) {
    (x, l) => f(x) :: l
  }
```
---
```
def filter[A](l: List[A])(f: A => Boolean): List[A] =
--
  l.foldRight(List.empty[A]) {
    (x, l) => if (f(x)) x :: l else l
  }
```
---
```
def filter[A](l: List[A])(f: A => Boolean): List[A] =
  l.foldRight(List.empty[A]) {
    (x, l) => if (f(x)) x :: l else l
  }
```
---
| \* Fold and laziness

```
def forall[A](l: List[A])(f: A => Boolean): Boolean =
```
---
| \* Fold and laziness

```
def forall[A](l: List[A])(f: A => Boolean): Boolean =
  l.foldLeft(true) { (acc, x) => f(x) && acc }

--
def forall[A](l: List[A])(f: A => Boolean): Boolean = {
  l.foldLeft(true) { (acc, x) =>
    println("Executing for " + x)
    f(x) && acc
  }
}
```
---
| \* forall/exists

```
def exists[A](l: List[A])(f: A => Boolean): Boolean =
--
  !forall(l)(!f(_))
```
---
| \* forall/exists

```
def exists[A](l: List[A])(f: A => Boolean): Boolean =
  !forall(l)(!f(_))
```
---
| \*Tuples

```
val t1: (Int, String) = (1, "hi")
--
val t2: Tuple2[Int,String] = Tuple2(1, "hi")
--
val t3 = 1 -> "hi"
--
val a = t1._1
val b = t3._2
```
---
| \*Imports

```
import collection.mutable._
--
import collection.mutable.{Set,Map}
--
import collection.mutable.{List => MList}
--
import collection.mutable.{_, List => _}
```
---
| \*Collections are functions

```
val dict = Map(1 -> "one", 2 -> "two")
List(1, 2) map dict

--
val arr = Array(5, 3, 4)
List(2, 1) map arr

--
val set = Set(1, 3, 5, 8)
(1 to 10) map set
```
---
| \*Uniform return type principle

```
arr map (_ + 2)
--
dict map (t => t._1.toString -> t._2)
--
import Function.tupled
dict map tupled(_.toString -> _)
--
dict.mapValues("<" + _ + ">")
--
set map (_ / 2)
```
---
| \*Partial functions
--
```
val reciprocal = new PartialFunction[Int,Double] {
  override def isDefinedAt(x: Int) = x != 0
  override def apply(x: Int) =
    if (isDefinedAt(x)) 1.toDouble / x
    else throw new MatchError("Division by zero")
}
```
---
| \*flatten/flatMap

Generate all combinations of numbers

```
val s = "abcd"
val prefixes = s.inits.toList
val suffixes = s.tails.toList
--
val lol = prefixes.map(_.tails.toList)
--
lol.flatten
--
prefixes.flatMap(_.tails)
--
lol.flatMap(identity) == lol.flatten
--
for {
  x <- l
  y <- l
} yield (x, y)
```
---
| \*Merging maps

```
val eng = Map(1 -> "one", 2 -> "two")
val ger = Map(1 -> "eins", 3 -> "drei")

--
List(eng, ger).flatten.groupBy(_._1).mapValues(_.map(_._2))
```
---
| \*zip

Exercise: Find the differences between consecutive numbers

```
val l = List(1, 3, 8, 11, 15, 17, 24, 27, 32)

--
(l zip l.tail)

--
(l.tail zip l) map tupled(_ - _)
```
